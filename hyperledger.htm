<!doctype html>
<html lang="es">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<link rel="shortcut icon" href="./images/favicon.ico" type="image/x-icon">
	<link rel="stylesheet" type="text/css" media="screen" href="normalize.css">
	<link rel="stylesheet" type="text/css" media="screen" href="markdown.css">
	<title>hyperledger</title>
</head>
<body>
<p>chapter 3</p>

<h1>hyperledger fabric architecture and components</h1>

<h2>hyperledger fabric overview</h2>

<h2>hyperledger fabric model</h2>

<ul>
<li><p>follows the <strong>execute-order-validate</strong> paradigm:</p>

<ul>
<li><p>fabric ckecks the transactions correctness, produces state updates for the transaction. <strong>endorsers</strong>: nodes executing transactions. they are called to validate and add a set of state updates produced as the result of a computation. multiple transactions can be executed simultaneously. state updates may contain conflicts.</p></li>
<li><p>fabric ordering service follows the consensus protocol. <strong>orderers</strong>:nodes running the consensus algorithm.</p></li>
<li><p>fabric validates the transaction to ensure that: a)transactions are executed according to the given trans. logic. b)no state conflicts exist among transactions wanting to update the same state. after transactions are validated, tey are added to the ledger using commiter nodes, endorsers.</p></li>
</ul></li>
<li><p>benefits of <strong>execute-order-validate</strong>:</p>

<ul>
<li>nodes ordering transactions are also executing them, validating the order and computations.</li>
<li>it enables the parallel execution of multiple transactions by different parts of the network.</li>
</ul></li>
<li><p>fabric has six capabilities:</p>

<ul>
<li>identity management: the membership service provider (<strong>msp</strong>) handles identity management. it manages user ids and authenticates all participants on the network.</li>
<li>privacy and confidentiality: <strong>private channels</strong> are restricted message routes used for trans. between subsets of network members. channels deliver promises only with trusted ordering services. <strong>private data collections</strong> (<strong>pdc</strong>) are offerec when the ordering service cannot be trusted and can be considered a partition of a ledger visible only to a subset network.</li>
<li>efficient processing: <br />
are offerec when the ordering service cannot be trusted and can be considered a partition of a ledger visible only to a subset network.</li>
<li>efficient processing:are offerec when the ordering service cannot be trusted and can be considered a partition of a ledger visible only to a subset network.</li>
<li>efficient processing:</li>
<li>business login: the smart contract or <strong>chaincode</strong> defines the business logic that constitutes the execution of a transaction.</li>
<li>governance: <strong>policies</strong> express governance models, and it is required to identify the parties that can deploy a chaincode or add an msp to a channel. </li>
<li>modular architecture: </li>
</ul></li>
</ul>

<h2>blockchain network</h2>

<h2>identity</h2>

<ul>
<li>each component that is part of the network, nodes, computers, administrators, clients, have certified credentials generated by one or more authorities.</li>
<li>these credentials accredit them as network operators.</li>
<li>once an identity is issued it will act on the network according to its assigned policies.</li>
<li>the job of policies is to set authentication parameters such as who has access to what and what actions an identity holder can perform in the network.</li>
<li>fabric does not ipose any identity technology, nevertheless fabric can support any <strong>public-key infrastructure</strong> (<strong>PKI</strong>).</li>
<li>a pki manages digital identities.</li>
<li>a digitial identity is bount to a pair of keys public and private.</li>
<li>identities can be revoked, losig the ability to operate in the network.</li>
</ul>

<h2>membership service provider (msp)</h2>

<ul>
<li>it provides a generic notion of id and the rules to assert its validity, also an api for authentication.</li>
<li>fabric uses one or more msps to manage identities and their life cycles in its network.</li>
<li>msp does not prescribe how identities should be issued only how they should be validated.</li>
<li>fabric becomes permissionless as soon as a given network is equipped with an msp that accepts any public keys.</li>
</ul>

<h2>policies</h2>

<ul>
<li>they configure who can do what and on which element of the network.</li>
<li>they set the governance of the network.</li>
<li>they govern who is allowed to access a given ledger, who can deploy a chaincode, who can upgrade the channel configuration.</li>
<li><strong>system channel</strong>: the first plase wher policies are encountered. it contains the msps that identify the farties that form the ordering service (ordering organizations), and msps identifying the identities that can transact in the network (<strong>consortium organizations</strong>). using thos msps the system channel identifies who can create application channels, via a policy included in the system channels genesis block.</li>
<li>a channel genesis block is the second place wher policies appear. creating a new channel sets policies to add and remove members and to approve a chaincode before ir is defined and commited to the channel. if policies are not set they are inherited from the sstem channel.</li>
<li>policies are the tools that admins use to govern a fabric network. they can be set to configure a network to be permissionless or can be set to restrict access to specific processes.</li>
</ul>

<h2>nodes</h2>

<ul>
<li>nodes are the communication entities of the blockchain.</li>
<li>a node has an identity that allows to perform certain operations:
<ul>
<li>clients: initiate the life cycle of a transaction in fabric.</li>
<li>endorsers: responsible for the execution of business logic, chaincodes.</li>
<li>orderers: participate in the consensus algoritm, decide the order of transactions.</li>
<li>committers: fetch the ledger from orderers and apply validation logic to establish the validity of each ordered transaction. endorseres are also committers.</li>
</ul></li>
</ul>

<h2>chaincode</h2>

<ul>
<li>smart contract is known as chaincode.</li>
<li>it is a pice of code that implements the application logic and runs during the execution phase.</li>
<li>it is not required to be deterministic.</li>
<li>a chaincode mus expose two functions: init and invoke.</li>
<li>init is used to initialize any data structure at initialization time.</li>
<li>invoke recieves arguments, on these the chaincode decides what to operation</li>
<li>a chaincode can be thought of as a namespace insidde th ledger that groups a set of key-value pairs managed by that chaincode.</li>
<li>steps required to successfully commit a transaction:
<ul>
<li>propose the transaction: a client prepares and sends a transaction proposal to the endorsers of the chaincode the proposal is targeting. this proposal specifies the chaincode and the arguments for the chaincode invocation.</li>
<li>execute the transaction proposal. the endorsers execute, <strong>simulate</strong>, the chaincode with the raguments provided in the proposal (invoke). the result consists of a return value and a <strong>read write</strong> set. The read write set is a data structure that captures the updates to the dependencies on the world state. the execution of the chaincode is called simulation because the world state does not change at this stage, these are proposed changes that need to be validated. all peers that execute the chaincode sign the output of the execution and send it back to the application. this signature is called an <strong>endorsement</strong>.</li>
</ul></li>
</ul>
</body>
</html>
